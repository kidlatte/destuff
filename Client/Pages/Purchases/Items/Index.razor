@inject NavigationManager nav
@inject IHttpService http

<div class="d-flex mb-3">
    @if (data != null && data.Count > 0)
    {
        <form @onsubmit="OnSearch" class="mw-100 me-auto" style="width: 300px">
            <div class="input-group">
                <input @bind-value="search" type="text" class="form-control" placeholder="Search..." aria-label="Search...">
                <button type="submit" class="btn btn-outline-secondary">
                    <i class="bi-search"></i>
                </button>
            </div>
        </form>
    }

    <button @onclick="() => create?.Open(PurchaseId)" type="button" class="btn btn-primary ms-1">Add item</button>
</div>

@if (data != null && data.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Stuff</th>
                <th scope="col" class="text-center">Quantity</th>
                <th scope="col" class="text-center">Price</th>
                <th scope="col" class="text-center">Total</th>
                <th scope="col" style=""></th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach(var item in data.List)
            {
                <tr>
                    <td>
                        <a href="@($"/stuffs/{item.Stuff.Slug}")">@item.Stuff.Name</a>
                    </td>
                    <td class="text-center">
                        @item.Quantity
                    </td>
                    <td class="text-end">
                        @(item.Price?.ToString("n2"))
                    </td>
                    <td class="text-end">
                        @((item.Quantity * item.Price ?? 0).ToString("n2"))
                    </td>
                    <td class="text-nowrap">
                        <button @onclick="() => UpdateOpen(item)" class="btn btn-sm btn-outline-secondary border border-0">
                            <i class="bi-pencil-square"></i>
                        </button>
                        <button @onclick="() => delete?.Open(item)" class="btn btn-sm btn-outline-danger border border-0">
                            <i class="bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot class="table-group-divider">
            <tr>
                <td class="text-end" colspan="3">
                    <em>Total (@data.List.Sum(x => x.Quantity) items)</em>
                </td>
                <td class="text-end">
                    @data.List.Sum(x => x.Quantity * x.Price ?? 0).ToString("n2")
                </td>
                <td></td>
            </tr>
        </tfoot>
    </table>

    <Pager Count="data.Count" Page="Page" PageSize="PageSize" GenerateLink="GenerateLink" />
}

<Destuff.Client.Pages.Purchases.Items.CreateModal @ref="create" OnCreated="LoadData" />
<Destuff.Client.Pages.Purchases.Items.UpdateModal @ref="update" OnUpdated="LoadData" />
<Destuff.Client.Pages.Purchases.Items.DeleteModal @ref="delete" OnDeleted="LoadData" />

@code
{
    [Parameter, SupplyParameterFromQuery(Name = "s")]
    public string? Search { get; set; }
    public string? search { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "p")]
    public int Page { get; set; }
    public int PageSize => 10;

    [Parameter]
    public required string PurchaseId { get; set; }

    PagedList<PurchaseItemListItem>? data { get; set; }

    CreateModal? create;
    UpdateModal? update;
    DeleteModal? delete;

    protected async override Task OnParametersSetAsync()
    {
        search = Search;
        await LoadData();
    }

    async Task LoadData()
    {
        var query = new PagedQuery { Search = Search, Page = Page, PageSize = PageSize };
        data = await http.GetAsync<PagedList<PurchaseItemListItem>>($"{ApiRoutes.PurchaseItems}?pid={PurchaseId}&{query}");
    }

    Task UpdateOpen(PurchaseItemListItem item) => update == null ? Task.CompletedTask : update.Open(item);

    string GenerateLink(int page) => $"/purchases/{PurchaseId}?{new PagedQuery { Search = Search, Page = page }}";

    void OnSearch() => nav.NavigateTo($"/purchases/{PurchaseId}?s={search}");
}