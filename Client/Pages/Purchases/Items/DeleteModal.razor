@inject IHttpService http

@if (model != null)
{
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Delete Item @model.Stuff.Name
                    </h5>
                    <button @onclick="Close" type="button" class="btn-close" aria-label="Close"></button>
                </div>
                <EditForm OnValidSubmit="OnSubmit" Model="model" autocomplete="off">
                    <div class="modal-body">
                        <p class="mb-3 fw-normal">
                            Are you sure you want to delete purchase item <strong>@model.Stuff.Name</strong>
                        </p>

                        <label class="text-danger">@error</label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@loading">
                            @(loading ? "Submitting..." : "Confirm")
                        </button>
                        <button @onclick="Close" type="button" class="btn btn-secondary">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public EventCallback<IPurchaseItemModel> OnDeleted { get; set; }


    IPurchaseItemModel? model { get; set; }
    string error { get; set; } = "";
    bool loading { get; set; } = false;

    async Task OnSubmit()
    {
        if (model == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            var result = await http.DeleteAsync($"{ApiRoutes.PurchaseItems}/{model.Id}");
            result.EnsureSuccessStatusCode();

            await OnDeleted.InvokeAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;

        Close();
    }


    public void Open(IPurchaseItemModel purchaseItem)
    {
        model = purchaseItem;

        StateHasChanged();
    }


    void Close()
    {
        model = null;
    }
}
