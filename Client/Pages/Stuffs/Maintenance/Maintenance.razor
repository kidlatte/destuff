@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<MudDataGrid @ref="grid" T="MaintenanceListItem" ServerData="LoadServerData" CurrentPage="gridPage" RowsPerPage="PageSize" Loading="loading"
             SortMode="SortMode.Single" Elevation="0">
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.EveryXDays" Title="Every x days" />
        <PropertyColumn Property="x => x.Next" Format="d" />
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton OnClick="_ => OnEditClick(context.Item)" Icon="@Icons.Material.Filled.Edit" aria-label="edit"></MudIconButton>
                <IconButtonDelete OnClick="_ => OnDeleteClick(context.Item)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <div class="d-flex px-5 py-3">
            @if (PageCount > 1) {
                <MudPagination Count="PageCount" Selected="pagerPage" SelectedChanged="PageChanged" Color="Color.Primary" />
            }
            <MudSpacer />
            <MudButton OnClick="OnAddClick" Color="Color.Primary" Variant="Variant.Filled">
                Add Part
            </MudButton>
        </div>
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter]
    public required IStuffModel Model { get; set; }

    [Parameter]
    public int? Page { get; set; }
    int gridPage => (Page ?? 1) - 1;
    int pagerPage = 1;

    int PageSize => 10;
    int PageCount;

    MudDataGrid<MaintenanceListItem>? grid;
    bool loading;

    protected override void OnInitialized() => PageCount = gridPage + 1;

    protected override void OnParametersSet() => pagerPage = Page ?? 1;

    async Task<GridData<MaintenanceListItem>> LoadServerData(GridState<MaintenanceListItem> state)
    {
        var sort = state.SortDefinitions.FirstOrDefault();
        var query = new ListQuery {
                Page = gridPage, // BUG: state returns wrong page on first load.
                PageSize = state.PageSize,
                SortField = sort?.SortBy,
                SortDir = sort?.Descending == true ? DestuffDirection.Descending : DestuffDirection.Ascending
            };

        loading = true;
        var result = await Http.GetAsync<PagedList<MaintenanceListItem>>(ApiRoutes.QueryMaintenancesByStuff(Model.Id, query));
        loading = false;

        if (result == null)
            throw new Exception("Result is null");

        PageCount = (result.Count - 1) / PageSize + 1;
        return new() {
                Items = result.List,
                TotalItems = result.Count
            };
    }

    void PageChanged(int i)
    {
        if (pagerPage != i)
            Nav.NavigateTo($"/stuffs/{Model.Slug}/parts?{new ListQuery { Page = i }}");
        pagerPage = i;
    }

    async void OnAddClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(CreateModal.Model), new MaintenanceRequest { StuffId = Model.Id });

        var dialog = await Dialog.ShowAsync<CreateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnEditClick(MaintenanceListItem item)
    {
        var model = await Http.GetAsync<MaintenanceModel>($"{ApiRoutes.Maintenances}/{item.Id}");

        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), model);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnDeleteClick(MaintenanceListItem item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Stuff), Model);
        parameters.Add(nameof(DeleteModal.Model), item);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }
}
