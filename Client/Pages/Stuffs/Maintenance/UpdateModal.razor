@inject IHttpService Http

@if (request != null)
{
    <EditForm OnValidSubmit="OnSubmit" Model="request" autocomplete="off">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6" Class="text-truncate pe-5">Edit @Model.Name</MudText>
            </TitleContent>
            <DialogContent>
                <DataAnnotationsValidator />

                <MudAutocomplete T="string" @bind-Value="request.Name" SearchFunc="@SearchDefaults" CoerceValue="true"
                                 Label="Name" Variant="Variant.Outlined" Adornment="Adornment.None" />

                <MudNumericField @bind-Value="request.EveryXDays" For="@(() => request.EveryXDays)" Disabled="loading"
                                 Label="Every x days" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="request.Notes" For="@(() => request.Notes)" Disabled="loading"
                              Label="Notes" Variant="Variant.Outlined" Lines="3" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="Close" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public required MaintenanceModel Model { get; set; }
    MaintenanceRequest? request { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override void OnParametersSet() => request = Model.ToRequest();

    Task<IEnumerable<string>> SearchDefaults(string? value)
    {
        return Task.FromResult(MaintenanceDefaults.Names.Where(x => x.Contains(value ?? "", StringComparison.InvariantCultureIgnoreCase)));
    }

    async Task OnSubmit()
    {
        if (request == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            var result = await Http.PutAsync<MaintenanceModel>($"{ApiRoutes.Maintenances}/{Model.Id}", request);
            dialog?.Close(result);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
    }

    void Close()
    {
        request = null;
        dialog?.Cancel();
    }
}
