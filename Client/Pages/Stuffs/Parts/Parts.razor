@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<div class="mw-100 mb-5">
    @if (parents != null && parents.Count == 1) {
            <dl>
                <dt>Parent</dt>
                <dd>
                    @foreach (var item in parents) {
                        <MudLink Href="@($"/stuffs/{item.Slug}")">@item.Name</MudLink>
                    }
                </dd>
            </dl>
    }
    else
    if (parents != null && parents.Count > 1) {
        <MudText Typo="Typo.h5">Parents</MudText>
        <ul class="list">
            @foreach (var item in parents) {
                <li>
                    <MudLink Href="@($"/stuffs/{item.Slug}")">@item.Name</MudLink>
                </li>
            }
        </ul>
    }
</div>

<MudDataGrid @ref="grid" T="StuffPartListItem" ServerData="LoadServerData" CurrentPage="gridPage" RowsPerPage="PageSize" Loading="loading"
             SortMode="SortMode.Single" Elevation="0">
    <Columns>
        <PropertyColumn Property="x => x.Part" Title="Parts">
            <CellTemplate>
                <MudLink Href="@($"/stuffs/{context.Item.Part.Slug}")">
                    @context.Item.Part.Name
                </MudLink>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Count" />
        <TemplateColumn>
            <CellTemplate>
                <DeleteIconButton OnClick="_ => OnDeleteClick(context.Item)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <div class="d-flex px-5 py-3">
            @if (PageCount > 1) {
                    <MudPagination Count="PageCount" Selected="pagerPage" SelectedChanged="PageChanged" Color="Color.Primary" />
            }
            <MudSpacer />
            <MudButton OnClick="OnAddClick" Color="Color.Primary" Variant="Variant.Filled">
                Add Part
            </MudButton>
        </div>
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter] 
    public required IStuffModel Model { get; set; }
    string? modelId;

    [Parameter]
    public int? Page { get; set; }
    int gridPage => (Page ?? 1) - 1;
    int pagerPage = 1;

    int PageSize => 10;
    int PageCount;

    List<StuffListItem>? parents;

    MudDataGrid<StuffPartListItem>? grid;
    bool loading;

    protected override void OnInitialized() => PageCount = gridPage + 1;

    protected override async Task OnParametersSetAsync()
    {
        pagerPage = Page ?? 1;

        if (modelId != Model.Id) {
            modelId = Model.Id;
            parents = await Http.GetAsync<List<StuffListItem>>($"{ApiRoutes.StuffParents}/{modelId}");
        }

    }

    async Task<GridData<StuffPartListItem>> LoadServerData(GridState<StuffPartListItem> state)
    {
        var sort = state.SortDefinitions.FirstOrDefault();
        var query = new ListQuery {
                Page = gridPage, // BUG: state returns wrong page on first load.
                PageSize = state.PageSize,
                SortField = sort?.SortBy,
                SortDir = sort?.Descending == true ? DestuffDirection.Descending : DestuffDirection.Ascending
            };

        loading = true;
        var result = await Http.GetAsync<PagedList<StuffPartListItem>>($"{ApiRoutes.StuffParts}/{Model.Id}?{query}");
        loading = false;

        if (result == null)
            throw new Exception("Result is null");

        PageCount = (result.Count - 1) / PageSize + 1;
        return new() {
            Items = result.List,
            TotalItems = result.Count
        };
    }

    void PageChanged(int i)
    {
        if (pagerPage != i)
            Nav.NavigateTo($"/stuffs/{Model.Slug}/parts?{new ListQuery { Page = i }}");
        pagerPage = i;
    }

    async void OnAddClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(CreateModal.Model), new StuffPartRequest { ParentId = Model.Id, Count = 1 });

        var dialog = await Dialog.ShowAsync<CreateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnDeleteClick(StuffPartListItem item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Parent), Model);
        parameters.Add(nameof(DeleteModal.Model), item);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }
}
