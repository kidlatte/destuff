@inject IHttpService http

@if (Stuff != null && Location != null)
{
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Remove from 
                        <strong>@Location.Name</strong>
                    </h5>
                    <button @onclick="Close" type="button" class="btn-close" aria-label="Close"></button>
                </div>
                <EditForm OnValidSubmit="OnSubmit" Model="Location" autocomplete="off">
                    <div class="modal-body">
                        <p class="mb-3 fw-normal">
                            Are you sure you want to remove stuff <strong>@Stuff.Name</strong>
                            from location <strong>@Location.Name</strong>
                        </p>

                        <label class="text-danger">@error</label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@loading">
                            @(loading ? "Submitting..." : "Confirm")
                        </button>
                        <button @onclick="Close" type="button" class="btn btn-secondary">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public EventCallback<ILocationModel> OnDeleted { get; set; }

    [Parameter]
    public IStuffModel? Stuff { get; set; }
    public ILocationModel? Location { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    async Task OnSubmit()
    {
        if (Stuff == null || Location == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            await http.DeleteAsync($"{ApiRoutes.StuffLocations}/{Stuff.Id}/{Location.Id}");
            await OnDeleted.InvokeAsync(Location);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;

        Close();
    }


    public void Open(ILocationModel model)
    {
        Location = model;
        StateHasChanged();
    }


    void Close()
    {
        Location = null;
    }
}
