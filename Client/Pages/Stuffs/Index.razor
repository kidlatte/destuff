@page "/"
@page "/stuffs"

@attribute [Authorize]
@inject NavigationManager nav
@inject IHttpService http
@inject IDialogService dialog

<PageTitle>Stuffs | Destuff</PageTitle>

<MudText Typo="Typo.h1" Class="my-5">Stuffs</MudText>

<MudDataGrid @ref="grid" T="StuffListItem" ServerData="LoadServerData" CurrentPage="gridPage" RowsPerPage="PageSize" SortMode="SortMode.Single">
    <ToolBarContent>
        <MudTextField T="string" Value="search" ValueChanged="OnSearch" Placeholder="Search"
                      Style="max-width: 300px" Clearable="true" Variant="Variant.Outlined" Margin="Margin.Dense"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudSpacer />
        <MudButton OnClick="OnAddClick" Variant="Variant.Filled" Color="Color.Primary" Class="mr-2">Add</MudButton>
        <MudButton OnClick="OnBulkClick" Variant="Variant.Filled" Color="Color.Secondary">Bulk</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x!.Name">
            <CellTemplate>
                <MudLink Href="@($"/stuffs/{context.Item?.Slug}")">@context.Item?.Name</MudLink>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x!.Locations">
            <CellTemplate>
                @if (context.Item != null)
                { 
                    @foreach (var (location, i) in context.Item.Locations.ToIndex())
                    {
                        @if (i > 0) { <text>, </text> }
                        <MudLink Href="@($"/locations/{location.Slug}")">@location.Name</MudLink>
                    }
                }
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn>
            <CellTemplate>
                @if (context.Item != null) 
                {
                    <MudIconButton OnClick="_ => OnDelete(context.Item)" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <div class="py-5 d-flex justify-center">
            @if (PageCount > 1)
            {
                <MudPagination Count="PageCount" Selected="pagerPage" SelectedChanged="PageChanged" Color="Color.Primary" />
            }
        </div>
    </PagerContent>
</MudDataGrid>

@code
{
    [Parameter, SupplyParameterFromQuery(Name = "s")]
    public string? Search { get; set; }
    string? search { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; } = 1;
    int gridPage => (Page ?? 1) - 1;
    int pagerPage = 1;

    public int PageSize => 10;
    public int PageCount;

    PagedList<StuffListItem>? data { get; set; }

    MudDataGrid<StuffListItem>? grid;

    protected override void OnInitialized() => PageCount = gridPage + 1;

    protected override async Task OnParametersSetAsync()
    {
        await Task.CompletedTask;
        search = Search;
        pagerPage = Page ?? 1;
        if (grid != null && Page == null) // BUG: ServerData doesn't auto reload
            await grid.ReloadServerData();
    }

    async Task LoadData()
    {
        if (grid != null)
            await grid.ReloadServerData();
    }

    async Task<GridData<StuffListItem>> LoadServerData(GridState<StuffListItem> state)
    {
        var sort = state.SortDefinitions.FirstOrDefault();
        var query = new PagedQuery {
            Search = Search,
            Page = gridPage, // BUG: state returns wrong page on first load.
            PageSize = state.PageSize,
            SortField = sort?.SortBy,
            SortDir = sort?.Descending == true ? DestuffDirection.Descending : DestuffDirection.Ascending
        };
        var result = await http.GetAsync<PagedList<StuffListItem>>($"{ApiRoutes.Stuffs}?{query}");
        if (result == null)
            throw new Exception("Result is null");

        PageCount = (result.Count - 1) / PageSize + 1;
        return new() {
            Items = result.List,
            TotalItems = result.Count
        };
    }

    void PageChanged(int i)
    {
        if (pagerPage != i)
            nav.NavigateTo($"/stuffs?{new PagedQuery { Search = Search, Page = i }}");
        pagerPage = i;
    }

    string GenerateLink(int page) => $"/stuffs?{new PagedQuery { Search = Search, Page = page }}";

    void OnSearch(string value)
    {
        search = value;
        nav.NavigateTo(string.IsNullOrEmpty(search) ? $"/stuffs" : $"/stuffs?s={search}");
    }

    async void OnAddClick()
    {
        var dialogRef = await dialog.ShowAsync<StuffCreateModal>();
        var result = await dialogRef.Result;
        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnBulkClick()
    {
        var dialogRef = await dialog.ShowAsync<CreateBulkModal>();
        var result = await dialogRef.Result;
        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnDelete(StuffListItem item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), item);

        var dialogRef = await dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialogRef.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }
}