@page "/stuffs/{Slug}/{Tab?}"
@attribute [Authorize]

@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>@(Model == null ? "" : $"{Model.Name} |") Stuffs | Destuff</PageTitle>

@if (Model != null)
{
    <div class="d-md-flex">
        <div class="text-right text-nowrap order-1 ms-5">
            <MudButton Href="/" StartIcon="@Icons.Material.Rounded.ChevronLeft" Variant="Variant.Outlined">
                Stuffs
            </MudButton>
            @if (Tab == StuffTabs.Details)
            {
                <FileUpload StuffId="@Model.Id" OnUploaded="OnUploaded" ImageOnly="true"
                    Label="Upload" Variant="Variant.Outlined" Color="Color.Tertiary" Class="ms-1" />
                <MudButton OnClick="OnUpdateClick" Variant="Variant.Outlined" 
                    Color="Color.Primary">Edit</MudButton>
                <MudButton OnClick="OnDeleteClick" Variant="Variant.Outlined"
                    Color="Color.Error">Delete</MudButton>
            }
            else if (Tab == StuffTabs.Locations)
            {
                <MudButton OnClick="OnLocationAddClick" Variant="Variant.Outlined"
                           Color="Color.Primary" Class="ms-1">Add Location</MudButton>
            }
        </div>
        <div class="text-truncate me-auto order-0">
            <MudText Typo="Typo.h1" Class="text-truncate my-5 my-md-3">@Model.Name</MudText>
        </div>
    </div>

    <MudTabs ActivePanelIndex="activePanelIndex" ActivePanelIndexChanged="OnActivePanelIndexChanged"
         Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Details">
            <div class="mw-100">
                <div class="mb-4">
                    <Thumbnails Items="uploads" />
                </div>

                <dl>
                    <dt>Name</dt>
                    <dd>@Model.Name</dd>
                </dl>

                @if (!string.IsNullOrEmpty(Model.Url))
                {
                    <dl>
                        <dt>URL</dt>
                        <dd class="text-truncate">
                            <MudLink Href="@Model.Url" Target="_blank">
                                @Model.Url
                            </MudLink>
                        </dd>
                    </dl>
                }

                @if (Model.IsSingleLocation && Model.FirstLocation != null)
                {
                    <dl>
                        <dt>Location</dt>
                        <dd>
                            <MudLink Href="@($"/locations/{Model.FirstLocation.Slug}")">
                                @Model.FirstLocation.Name
                            </MudLink>
                        </dd>
                    </dl>
                }
                else if (Model.StuffLocations != null && Model.StuffLocations.Any())
                {
                    <dl>
                        <dt>Count</dt>
                        <dd>
                            <MudLink Href="@($"/stuffs/{Slug}/locations")">
                                @Model.StuffLocations.Sum(x => x.Count)
                            </MudLink>
                        </dd>
                    </dl>
                    <dl>
                        <dt>Location</dt>
                        <dd>
                            @foreach (var (item, i) in Model.StuffLocations.ToIndex())
                            {
                                @if (i > 0) { <text>, </text> }

                                <MudLink Href="@($"/locations/{item.Location.Slug}")">
                                    @item.Location.Name
                                </MudLink>

                                @if (item.Count > 1)
                                {
                                    <span title="@($"{item.Count} units")">@($" ({item.Count})")</span>
                                }
                            }
                        </dd>
                    </dl>
                }

                <div>@Model.Notes</div>
            </div>
        </MudTabPanel>
        <MudTabPanel Text="Locations">
            <Locations Stuff="Model" Models="Model.StuffLocations" />
        </MudTabPanel>
        <MudTabPanel Text="Purchases">
            <Purchases Model="Model" Page="Page" />
        </MudTabPanel>
    </MudTabs>
}

@code
{
    [Parameter] public string? Slug { get; set; }
    [Parameter] public string? Tab { get; set; }
    int activePanelIndex;

    [Parameter, SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    StuffModel? Model { get; set; }
    List<UploadModel> uploads = new List<UploadModel>();

    protected override void OnParametersSet() => activePanelIndex = Tab switch
    {
        StuffTabs.Locations => 1,
        StuffTabs.Purchases => 2,
        _ => 0
    };

    protected override Task OnInitializedAsync() => LoadData();

    private async Task LoadData()
    {
        try
        {
            uploads.Clear();
            Model = await Http.GetAsync<StuffModel>($"{ApiRoutes.StuffSlug}/{Slug}");
            if (Model != null)
                uploads.AddRange(Model.Uploads.OrEmpty());
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                Nav.NavigateTo($"/");
            else
                throw;
        }
    }

    void OnActivePanelIndexChanged(int index)
    {
        activePanelIndex = index;
        switch (index) {
            case 1:
                Nav.NavigateTo($"stuffs/{Slug}/{StuffTabs.Locations}");
                break;
            case 2:
                Nav.NavigateTo($"stuffs/{Slug}/{StuffTabs.Purchases}");
                break;
            default:
                Nav.NavigateTo($"stuffs/{Slug}");
                break;
        }
    }

    async void OnUpdateClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), Model);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            var data = result.Data as StuffModel;
            if (data == null || data.Slug == Slug)
            {
                await LoadData();
                StateHasChanged();
            }
            else
                Nav.NavigateTo($"stuffs/{data.Slug}");
        }
    }

    async void OnDeleteClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), Model);

        var dialogRef = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialogRef.Result;

        if (!result.Canceled)
            Nav.NavigateTo($"/");
    }

    async void OnLocationAddClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(LocationAddModal.Model), Model);

        var dialogRef = await Dialog.ShowAsync<LocationAddModal>("", parameters);
        var result = await dialogRef.Result;

        if (!result.Canceled)
        {
            await LoadData();
            StateHasChanged();
        }
    }


    async Task OnUploaded(UploadModel upload)
    {
        uploads.Add(upload);
        await LoadData();
    }
}