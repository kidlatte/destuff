@page "/s/{Slug}"

@attribute [Authorize]
@inject IHttpService http
@inject NavigationManager nav

@if (model != null)
{
    <div class="text-end">
        <a
            href="/"
            class="btn btn-outline-secondary"
        >
            Stuffs
        </a>
        <FileUpload StuffId="@model.Id" OnUploaded="OnUploaded" ImageOnly="true"
            Label="Upload" Class="btn btn-outline-primary" />
        <button
            @onclick="() => update?.Open(model)"
            type="button" class="btn btn-outline-primary"
        >
            Edit
        </button>
        <button
            @onclick="() => delete?.Open(model)"
            type="button" class="btn btn-outline-danger"
        >
            Delete
        </button>
    </div>

    <h1>@model.Name</h1>

    <div class="mw-100" style="width: 600px; max-width: 100%;">
        <div class="mb-4">
            <Thumbnails Items="uploads" />
        </div>

        @if (model.IsSingleLocation && model.FirstLocation != null)
        {
            <dl class="row">
                <dt class="col-sm-3">Location</dt>
                <dd class="col-sm-9">
                    <a href="@($"/l/{model.FirstLocation.Slug}")">
                        @model.FirstLocation.Name
                    </a>
                </dd>
            </dl>
        }

        <div>@model.Notes</div>
    </div>

}

<UpdateModal @ref="update" OnUpdated="OnUpdated" />
<DeleteModal @ref="delete" OnDeleted="OnDeleted" />

@code
{
    [Parameter]
    public string? Slug { get; set; }
    
    StuffModel? model { get; set; }
    List<UploadModel> uploads = new List<UploadModel>();

    DeleteModal? delete;
    UpdateModal? update;

    protected override Task OnParametersSetAsync() => LoadData();

    private async Task LoadData()
    {
        try
        {
            model = await http.GetAsync<StuffModel>($"{ApiRoutes.StuffSlug}/{Slug}");
            if (model != null)
                uploads.AddRange(model.Uploads.OrEmpty());
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                nav.NavigateTo($"/");
            else
                throw;
        }
    }

    async Task OnUpdated(StuffModel stuff)
    {
        var path = $"s/{stuff.Slug}";

        if (nav.ToBaseRelativePath(nav.Uri) == path)
            await LoadData();
        else
            nav.NavigateTo(path);
    }

    void OnDeleted() => nav.NavigateTo("/");
    void OnUploaded(UploadModel upload) => uploads.Add(upload);
}