@page "/stuffs/{Slug}/{Tab?}"

@attribute [Authorize]
@inject IHttpService http
@inject NavigationManager nav

<PageTitle>@(model == null ? "Stuffs" : $"{model.Name} | Stuffs") | Destuff</PageTitle>

@if (model != null)
{
    <div class="d-flex">
        <div class="me-auto">
            <MudText Typo="Typo.h1" Class="my-5">@model.Name</MudText>
        </div>
        <div>
            <a href="/"
               class="btn btn-outline-secondary">
                <i class="bi bi-chevron-left"></i>
                Stuffs
            </a>
            @if (Tab == StuffTabs.Details)
            {
                <FileUpload StuffId="@model.Id" OnUploaded="OnUploaded" ImageOnly="true"
                    Label="Upload" Class="btn btn-outline-primary ms-1" />
                <button @onclick="() => update?.Open(model)"
                        type="button" class="btn btn-outline-primary">
                    Edit
                </button>
                <button @onclick="() => delete?.Open(model)"
                        type="button" class="btn btn-outline-danger">
                    Delete
                </button>

                <UpdateModal @ref="update" OnUpdated="OnUpdated" />
                <DeleteModal @ref="delete" OnDeleted="OnDeleted" />
            }
            else if (Tab == StuffTabs.Locations)
            {

            }
        </div>
    </div>
    

    <MudTabs ActivePanelIndex="activePanelIndex" ActivePanelIndexChanged="OnActivePanelIndexChanged"
         Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Details">
            <div class="mw-100" style="width: 600px; max-width: 100%;">
                <div class="mb-4">
                    <Thumbnails Items="uploads" />
                </div>

                @if (!string.IsNullOrEmpty(model.Url))
                {
                    <dl class="row">
                        <dt class="col-sm-3">URL</dt>
                        <dd class="col-sm-9 text-truncate">
                            <a href="@model.Url" target="_blank">
                                @model.Url
                            </a>
                        </dd>
                    </dl>
                }

                @if (model.IsSingleLocation && model.FirstLocation != null)
                {
                    <dl class="row">
                        <dt class="col-sm-3">Location</dt>
                        <dd class="col-sm-9">
                            <a href="@($"/locations/{model.FirstLocation.Slug}")">
                                @model.FirstLocation.Name
                            </a>
                            <small class="muted">
                                (<a href="@($"/stuffs/{Slug}/locations")">more</a>)
                            </small>
                        </dd>
                    </dl>
                }
                else if (model.StuffLocations != null && model.StuffLocations.Any())
                {
                    <dl class="row">
                        <dt class="col-sm-3">Count</dt>
                        <dd class="col-sm-9">
                            <a href="@($"/stuffs/{Slug}/locations")">
                                @model.StuffLocations.Sum(x => x.Count)
                            </a>
                        </dd>
                    </dl>
                    <dl class="row">
                        <dt class="col-sm-3">Location</dt>
                        <dd class="col-sm-9">
                            @foreach (var (item, i) in model.StuffLocations.ToIndex())
                            {
                                @if (i > 0)
                                {
                                    <text>, </text>
                                }
                                if (item.Location != null)
                                {
                                    <a href="@($"/locations/{item.Location.Slug}")">
                                        @item.Location.Name
                                    </a>
                                    @if (item.Count > 1)
                                    {
                                        <span title="@($"{item.Count} units")">@($" ({item.Count})")</span>
                                    }
                                }
                            }
                        </dd>
                    </dl>
                }

                <div>@model.Notes</div>
            </div>
        </MudTabPanel>
        <MudTabPanel Text="Locations">
            <button @onclick="() => locationAdd?.Open()"
                    type="button" class="btn btn-outline-primary ms-1">
                Add
            </button>

            <LocationAddModal @ref="locationAdd" Model="model" OnAdded="LoadData" />
        </MudTabPanel>
    </MudTabs>
}

@code
{
    [Parameter] public string? Slug { get; set; }
    [Parameter] public string? Tab { get; set; }
    int activePanelIndex;

    StuffModel? model { get; set; }
    List<UploadModel> uploads = new List<UploadModel>();

    DeleteModal? delete;
    UpdateModal? update;
    LocationAddModal? locationAdd;

    protected override Task OnParametersSetAsync()
    {
        activePanelIndex = Tab switch
        {
            StuffTabs.Locations => 1,
            _ => 0
        };

        return LoadData(); 
    }

    private async Task LoadData()
    {
        try
        {
            model = await http.GetAsync<StuffModel>($"{ApiRoutes.StuffSlug}/{Slug}");
            if (model != null)
                uploads.AddRange(model.Uploads.OrEmpty());
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                nav.NavigateTo($"/");
            else
                throw;
        }
    }

    async Task OnUpdated(StuffModel stuff)
    {
        if (Slug != stuff.Slug) 
            nav.NavigateTo($"stuffs/{stuff.Slug}");
        else
            await LoadData();
    }

    void OnActivePanelIndexChanged(int index)
    {
        activePanelIndex = index;
        switch (index)
        {
            case 1:
                nav.NavigateTo($"stuffs/{Slug}/{StuffTabs.Locations}");
                break;
            default:
                nav.NavigateTo($"stuffs/{Slug}");
                break;
        }
        
    }

    void OnDeleted() => nav.NavigateTo("/");
    void OnUploaded(UploadModel upload) => uploads.Add(upload);
}