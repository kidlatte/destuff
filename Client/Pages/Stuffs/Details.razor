@page "/s/{Slug}"
@attribute [Authorize]

@inject IHttpService http
@inject NavigationManager nav

@if (model != null)
{
    <div class="text-end">
        <a
            href="/"
            class="btn btn-outline-secondary btn-sm"
        >
            Stuffs
        </a>
        <button
            @onclick="() => update?.Open(model)"
            type="button" class="btn btn-outline-primary btn-sm"
        >
            Edit
        </button>
        <button
            @onclick="() => delete?.Open(model)"
            type="button" class="btn btn-outline-danger btn-sm"
        >
            Delete
        </button>
    </div>

    <h1>@model.Name</h1>

    <div style="width: 600px; max-width: 100%;">
    <div>@model.Notes</div>

    @if (model.IsSingleLocation && model.FirstLocation != null)
    {
        <dl class="row">
            <dt class="col-sm-3">Location</dt>
            <dd class="col-sm-9">
                <a href="@($"/l/{model.FirstLocation.Slug}")">
                    @model.FirstLocation.Name
                </a>
            </dd>
        </dl>
    }
    </div>
}

<DeleteModal @ref="delete" OnDeleted="OnDeleted" />
<UpdateModal @ref="update" OnUpdated="LoadData" />

@code
{
    [Parameter]
    public string? Slug { get; set; }
    
    StuffModel? model { get; set; }
    DeleteModal? delete;
    UpdateModal? update;

    protected override Task OnParametersSetAsync() => LoadData();

    private async Task LoadData()
    {
        try
        {
            model = await http.GetAsync<StuffModel>($"{ApiRoutes.StuffSlug}/{Slug}");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                nav.NavigateTo($"/locations");
            else
                throw;
        }
    }

    void OnDeleted()
    {
        nav.NavigateTo("/");
    }
}