@inject IHttpService http

@if (model != null)
{
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Add Stuff
                        @(locationName == null ? "" : $"in {locationName}")
                    </h5>
                    <button @onclick="Close" type="button" class="btn-close" aria-label="Close"></button>
                </div>
                <EditForm OnValidSubmit="OnSubmit" Model="model" autocomplete="off">
                    <div class="modal-body">
                        <DataAnnotationsValidator />

                        <p class="mb-3 fw-normal">
                            @if (locationName == null)
                            {
                                <text>Add a new stuff.</text>
                            }
                            else
                            {
                                <text>
                                    Add a new stuff in
                                    <strong>@locationName</strong>
                                .</text>
                            }
                        </p>

                        <div class="form-floating mb-1">
                            <InputText @bind-Value="model.Name" class="form-control"
                                placeholder="Name" disable="@loading" autocomplete="off" />
                            <label>Name</label>
                            <ValidationMessage For="@(() => model.Name)" />
                        </div>

                        <div class="form-floating mb-1">
                            <InputTextArea @bind-Value="model.Notes" class="form-control" style="height: 100px"
                                placeholder="Notes" disable="@loading" />
                            <label for="floatingPassword">Notes</label>
                            <ValidationMessage For="@(() => model.Notes)" />
                        </div>

                        <label class="text-danger">@error</label>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@loading">
                            @(loading ? "Submitting..." : "Confirm")
                        </button>
                        <button @onclick="Close" type="button" class="btn btn-secondary">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<StuffModel> OnCreated { get; set; }

    StuffCreateModel? model { get; set; }
    List<LocationModel>? locations { get; set; }

    string? locationName { get; set; }
    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override async Task OnInitializedAsync() 
    {
        locations = await http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
    }

    async Task OnSubmit()
    {
        if (model == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            var result = await http.PostAsync<StuffModel>(ApiRoutes.Stuffs, model);

            Close();
            await OnCreated.InvokeAsync(result);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
    }

    public void Open(LocationModel? location = null)
    {
        locationName = location?.Name;

        model = new StuffCreateModel 
        {
            LocationId = location?.Id
        };

        StateHasChanged();
    }

    public void Close()
    {
        model = null;
    }
}