@inject IHttpService http

@if (model != null)
{
    <EditForm OnValidSubmit="OnSubmit" Model="model" autocomplete="off">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Delete <strong>@model.Name</strong></MudText>
            </TitleContent>
            <DialogContent>
                <DataAnnotationsValidator />

                <p class="">
                    Are you sure you want to delete stuff <strong>@model.Name</strong>
                </p>
                <MudTextField @bind-Value="model.Id" InputType="InputType.Hidden" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" Label="DELETE" Color="Color.Warning" />
                <MudButton OnClick="Close" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public EventCallback<IStuffModel> OnDeleted { get; set; }


    IStuffModel? model { get; set; }
    string error { get; set; } = "";
    bool loading { get; set; } = false;

    async Task OnSubmit()
    {
        if (model == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            await http.DeleteAsync($"{ApiRoutes.Stuffs}/{model.Id}");
            await OnDeleted.InvokeAsync();
            dialog?.Close();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;

        Close();
    }


    public void Open(IStuffModel stuff)
    {
        model = stuff;

        StateHasChanged();
    }


    void Close()
    {
        model = null;
    }
}
