@inject IHttpService http

@if (bulk != null)
{
    <div class="modal-backdrop fade show"></div>

    <div class="modal fade show" tabindex="-1" role="dialog" style="display: block; overflow-y: auto;">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Stuff by Bulk</h5>
                    <button @onclick="Close" type="button" class="btn-close" aria-label="Close"></button>
                </div>
                <EditForm OnValidSubmit="OnSubmit" Model="bulk" autocomplete="off">
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <p>Add one stuff per line.</p>

                        <div class="form-floating mb-1">
                            <InputTextArea @bind-Value="bulk.BatchNames" class="form-control" style="height: 100px"
                                placeholder="Notes" disable="@loading" />
                            <label>Name</label>
                            <ValidationMessage For="@(() => bulk.BatchNames)" />
                        </div>

                        <div class="form-floating mb-1">
                            <LocationSelect @bind-Value="bulk.LocationId" Loading="loading" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" disabled="@loading">
                            @(loading ? "Submitting..." : "Confirm")
                        </button>
                        <button @onclick="Close" type="button" class="btn btn-secondary">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public Toast? Toast { get; set; }

    [Parameter]
    public EventCallback<StuffModel> OnCreated { get; set; }

    StuffBulkCreateModel? bulk { get; set; }
    bool loading { get; set; } = false;

    async Task OnSubmit()
    {
        if (bulk == null)
            throw new NullReferenceException();

        loading = true;

        var names = (bulk.BatchNames ?? "").Split("\n", StringSplitOptions.RemoveEmptyEntries).ToList();
        foreach (var name in names)
        {
            var model = new StuffCreateModel
            {
                Name = name,
                LocationId = bulk.LocationId
            };

            try
            {
                var result = await http.PostAsync<StuffModel>(ApiRoutes.Stuffs, model);
                await OnCreated.InvokeAsync(result);

                Toast?.Open($"{model.Name} has been added.");
            }
            catch (Exception ex)
            {
                Toast?.Error($"{ex.Message}");
            }
        }

        loading = false;
        Close();
    }

    public void Open()
    {
        bulk = new StuffBulkCreateModel();
        StateHasChanged();
    }

    public void Close()
    {
        bulk = null;
    }

    class StuffBulkCreateModel
    {
        public string? BatchNames { get; set; }
        public string? LocationId { get; set; }
    }
}