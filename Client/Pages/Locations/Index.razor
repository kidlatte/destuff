@page "/locations"
@attribute [Authorize]

@inject IHttpService Http

<PageTitle>Locations</PageTitle>

<h1>Locations</h1>

<div class="text-end mb-3">
    <MudSpacer />
    <MudButton OnClick="_ => create?.Open()" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton OnClick="_ => MapPaths()" Variant="Variant.Filled" Color="Color.Secondary">Refresh</MudButton>
</div>

<MudTreeView T="LocationModel" Items="items?.ToHashSet()" @bind-SelectedValue="selected" Hover="true">
    <ItemTemplate Context="item">
        <MudTreeViewItem Value="@item" Text="@item.Name" Items="@item.Children?.ToHashSet()" Expanded="true">
            <BodyContent>
                <div class="d-flex justify-space-between align-items-center w-100">
                    <div class="py-2">
                        <label>@item.Name</label>
                    </div>
                    <div class="flex-0">
                        @if (item == selected)
                        {
                            <MudIconButton OnClick="_ => create?.Open(item)" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => update?.Open(item)" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => delete?.Open(item)" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="mx-2" />
                        }
                    </div>
                </div>
            </BodyContent>
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>

<LocationCreateModal @ref="create" OnCreated="LoadData" />
<UpdateModal @ref="update" OnUpdated="LoadData" />
<DeleteModal @ref="delete" OnDeleted="LoadData" />

@code
{
    List<LocationModel>? items { get; set; }
    LocationModel? selected { get; set; }

    LocationCreateModal? create;
    UpdateModal? update;
    DeleteModal? delete;


    protected override Task OnInitializedAsync()
    {
        return LoadData();
    }

    async Task LoadData(LocationModel? model = null)
    {
        items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
        selected = model;
    }

    async Task MapPaths()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, ApiRoutes.LocationMap);
        await Http.SendAsync(request);

        items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
    }
}