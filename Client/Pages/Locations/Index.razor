@page "/locations"
@attribute [Authorize]

@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>Locations | Destuff</PageTitle>


<div class="d-md-flex">
    <div class="text-right text-nowrap order-1">
        <MudButton OnClick="_ => OnAddClick()" Variant="Variant.Outlined" Color="Color.Primary">Add</MudButton>
        <MudButton OnClick="MapPaths" Variant="Variant.Outlined" Color="Color.Secondary">Refresh</MudButton>
    </div>
    <div class="text-truncate me-auto order-0">
        <MudText Typo="Typo.h1" Class="text-truncate my-5 my-md-3">Locations</MudText>
    </div>
</div>

<div>
    <MudTreeView T="LocationModel" Items="items?.ToHashSet()" Hover="true">
        <ItemTemplate Context="item">
            <MudTreeViewItem Value="@item" Text="@item.Name" Items="@item.Children?.ToHashSet()" Expanded="true">
                <BodyContent>
                    <div class="d-flex justify-space-between align-center w-100">
                        <div>
                            <label class="label-name">@item.Name</label>
                        </div>
                        <div class="btn-locations">
                            <MudIconButton Href="@($"/locations/{item.Slug}")" Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => OnAddClick(item)" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => OnEditClick(item)" Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => OnDeleteClick(item)" Disabled="@item.Children.OrEmpty().Any()"
                                           Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="mx-2" />
                        </div>
                    </div>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</div>

@code
{
    List<LocationModel>? items { get; set; }

    protected override Task OnInitializedAsync() => LoadData();

    async Task LoadData() => items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);

    async Task MapPaths()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, ApiRoutes.LocationMap);
        await Http.SendAsync(request);

        await LoadData();
    }

    async void OnAddClick(LocationModel? item = null)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(LocationCreateModal.Parent), item);

        var dialog = await Dialog.ShowAsync<LocationCreateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            StateHasChanged();
        }
    }

    async void OnEditClick(LocationModel item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), item);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        { 
            await LoadData();
            StateHasChanged();
        }
    }

    async void OnDeleteClick(LocationModel item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), item);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
            StateHasChanged();
        }
    }
}