@page "/locations"
@attribute [Authorize]

@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>Locations | Destuff</PageTitle>

<MudText Typo="Typo.h1" Class="my-5">Locations</MudText>

<div class="text-end mb-3">
    <MudSpacer />
    <MudButton OnClick="_ => OnAddClick()" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    <MudButton OnClick="_ => MapPaths()" Variant="Variant.Filled" Color="Color.Secondary">Refresh</MudButton>
</div>

<MudTreeView T="LocationModel" Items="items?.ToHashSet()" @bind-SelectedValue="selected" Hover="true">
    <ItemTemplate Context="item">
        <MudTreeViewItem Value="@item" Text="@item.Name" Items="@item.Children?.ToHashSet()" Expanded="true">
            <BodyContent>
                <div class="d-flex justify-space-between align-items-center w-100">
                    <div class="py-2">
                        <label>@item.Name</label>
                    </div>
                    <div class="flex-0">
                        @if (item == selected)
                        {
                            <MudIconButton OnClick="_ => OnAddClick(item)" Icon="@Icons.Material.Filled.Add" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => OnEditClick(item)" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="mx-2" />
                            <MudIconButton OnClick="_ => OnDeleteClick(item)" Disabled="@item.Children.OrEmpty().Any()"
                                Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="mx-2" />
                        }
                    </div>
                </div>
            </BodyContent>
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>

@code
{
    List<LocationModel>? items { get; set; }
    LocationModel? selected { get; set; }

    UpdateModal? update;

    protected override Task OnInitializedAsync()
    {
        return LoadData();
    }

    async Task LoadData(LocationModel? model = null)
    {
        items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
        selected = model;
    }

    async Task MapPaths()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, ApiRoutes.LocationMap);
        await Http.SendAsync(request);

        items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
    }

    async void OnAddClick(LocationModel? item = null)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(LocationCreateModal.Parent), item);

        var dialog = await Dialog.ShowAsync<LocationCreateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
            StateHasChanged();
        }
    }

    async void OnEditClick(LocationModel item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), item);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        { 
            items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
            StateHasChanged();
        }
    }

    async void OnDeleteClick(LocationModel item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), item);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            items = await Http.GetAsync<List<LocationModel>>(ApiRoutes.Locations);
            StateHasChanged();
        }
    }

}