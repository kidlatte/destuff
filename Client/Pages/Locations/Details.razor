@page "/l/{Slug}"
@attribute [Authorize]

@inject IHttpService http
@inject NavigationManager nav


@if (model != null)
{
    <div class="text-end">
        <a
            href="/locations"
            class="btn btn-outline-secondary btn-sm"
        >
            Locations
        </a>
        <button
            @onclick="() => update?.Open(model)"
            type="button" class="btn btn-outline-primary btn-sm"
        >
            Edit
        </button>
        <button
            @onclick="() => delete?.Open(model)"
            type="button" class="btn btn-outline-danger btn-sm"
            disabled="@tree?.First().Children?.Any()"
        >
            Delete
        </button>
    </div>

    <h1>@model.Name</h1>

    <div>@model.Notes</div>

    <TreeLinks Items="tree" />
}

<UpdateModal @ref="update" OnUpdated="Updated" />
<DeleteModal @ref="delete" OnDeleted="LoadData" />

@code {
    [Parameter]
    public string? Slug { get; set; }
    
    LocationModel? model { get; set; }
    
    List<LocationTreeModel>? tree { get; set; }

    UpdateModal? update;
    DeleteModal? delete;


    protected override Task OnParametersSetAsync()
    {
        return LoadData();
    }

    async Task LoadData()
    {
        try
        {
            model = await http.GetAsync<LocationModel>($"{ApiRoutes.LocationSlug}/{Slug}");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                nav.NavigateTo($"/locations");
            else
                throw;
        }
        var item = await http.GetAsync<LocationTreeModel>($"{ApiRoutes.LocationTree}/{model?.Id}");
        tree = new List<LocationTreeModel> { item! };
    }

    void Updated (LocationModel item) {
        nav.NavigateTo($"/l/{item.Slug}");
    }
}