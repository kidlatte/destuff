@page "/locations/{Slug}"
@attribute [Authorize]

@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>@(Model == null ? "" : $"{Model.Name} |") Locations | Destuff</PageTitle>

@if (Model != null)
{
    <div class="d-md-flex">
        <div class="text-right text-nowrap order-1 ms-5">
            <MudButton Href="/locations" StartIcon="@Icons.Material.Rounded.ChevronLeft" Variant="Variant.Outlined">
                Locations
            </MudButton>
            <MudButton OnClick="OnUpdateClick" Variant="Variant.Outlined"
                       Color="Color.Primary">Edit</MudButton>
            <MudButton OnClick="OnDeleteClick" Variant="Variant.Outlined"
                       Color="Color.Error">Delete</MudButton>
        </div>
        <div class="text-truncate my-5 my-md-3 me-auto order-0">
            @if (Model.Data?.Path != null) {
                <div>
                    @foreach (var (item, i) in Model.Data.Path.ToIndex()) {
                        <LocationLink Model="item" />
                        @if (i < Model.Data.Path.Count - 1) {
                            <text> / </text>
                        }
                    }
                </div>
            }

            <MudText Typo="Typo.h1" Class="text-truncate">@Model.Name</MudText>
        </div>
    </div>

    
    <div>@Model.Notes</div>

    <MudTreeView T="LocationTreeItem" Items="items?.ToHashSet()" Hover="true">
        <ItemTemplate Context="item">
            <MudTreeViewItem Value="@item" Text="@item.Name" Items="@item.Children?.ToHashSet()" Expanded="true">
                <BodyContent>
                    <a href="@($"/locations/{item.Slug}")" class="d-inline-block w-100 py-2">@item.Name</a>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>

    <MudPaper Class="my-5 pa-3 pa-md-5">
        <MudText Typo="Typo.h2" Class="mb-3">Stuffs</MudText>
        <Stuffs Model="Model" Page="Page" />
    </MudPaper>
}

@code {
    [Parameter]
    public string? Slug { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    LocationModel? Model { get; set; }

    List<LocationTreeItem>? items { get; set; }

    protected override Task OnParametersSetAsync() => LoadData();

    async Task LoadData()
    {
        try
        {
            Model = await Http.GetAsync<LocationModel>($"{ApiRoutes.LocationBySlug}/{Slug}");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                Nav.NavigateTo($"/locations");
            else
                throw;
        }

        var item = await Http.GetAsync<LocationTreeItem>($"{ApiRoutes.LocationTree}/{Model?.Id}");
        items = item?.Children?.Any() ?? false ? new() { item } : null;
    }

    async void OnUpdateClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), Model);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data as LocationModel;
            if (data == null || data.Slug == Slug)
            {
                await LoadData();
                StateHasChanged();
            }
            else
                Nav.NavigateTo($"locations/{data.Slug}");
        }
    }

    async void OnDeleteClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), Model);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            Nav.NavigateTo($"/locations");
    }
}