@page "/users"

@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>Users | Destuff</PageTitle>

<MudText Typo="Typo.h1" Class="my-5">Users</MudText>

<MudDataGrid @ref="grid" T="UserModel" ServerData="LoadServerData" CurrentPage="gridPage" RowsPerPage="PageSize" Loading="loading" SortMode="SortMode.Single">
    <ToolBarContent>
        <MudTextField T="string" Value="search" ValueChanged="OnSearch" Placeholder="Search"
                      Style="max-width: 300px" Clearable="true" Variant="Variant.Outlined" Margin="Margin.Dense"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
        <MudSpacer />
        <MudButton OnClick="OnAddClick" Variant="Variant.Outlined" Color="Color.Primary" Class="mr-2">Add</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x!.UserName" Title="User" />
        <TemplateColumn Sortable="false">
            <CellTemplate>
                @if (context.Item != null)
                {
                    <div class="d-flex flex-nowrap">
                        <MudIconButton OnClick="_ => OnEditClick(context.Item)" Title="Change Password" Icon="@Icons.Material.Filled.Key" Color="Color.Tertiary" aria-label="change password"></MudIconButton>
                        <DeleteIconButton OnClick="_ => OnDeleteClick(context.Item)" />
                    </div>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <div class="py-5 d-flex justify-center">
            @if (PageCount > 1)
            {
                <MudPagination Count="PageCount" Selected="pagerPage" SelectedChanged="PageChanged" Color="Color.Primary" />
            }
        </div>
    </PagerContent>
</MudDataGrid>

@code
{
    [Parameter, SupplyParameterFromQuery(Name = "s")]
    public string? Search { get; set; }
    string? search { get; set; }

    [Parameter, SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; } = 1;
    int gridPage => (Page ?? 1) - 1;
    int pagerPage = 1;

    int PageSize => 10;
    int PageCount;

    MudDataGrid<UserModel>? grid;
    bool loading;

    protected override void OnInitialized() => PageCount = gridPage + 1;

    protected override async Task OnParametersSetAsync()
    {
        search = Search;
        pagerPage = Page ?? 1;
        if (grid != null && Page == null) // BUG: ServerData doesn't auto reload
            await grid.ReloadServerData();
    }

    async Task<GridData<UserModel>> LoadServerData(GridState<UserModel> state)
    {
        var sort = state.SortDefinitions.FirstOrDefault();
        var query = new ListQuery
            {
                Search = Search,
                Page = gridPage, // BUG: state returns wrong page on first load.
                PageSize = state.PageSize,
                SortField = sort?.SortBy,
                SortDir = sort?.Descending == true ? DestuffDirection.Descending : DestuffDirection.Ascending
            };

        loading = true;
        var result = await Http.GetAsync<PagedList<UserModel>>($"{ApiRoutes.Users}?{query}");
        loading = false;

        if (result == null)
            throw new Exception("Result is null");

        PageCount = (result.Count - 1) / PageSize + 1;
        return new()
            {
                Items = result.List,
                TotalItems = result.Count
            };
    }

    void PageChanged(int i)
    {
        if (pagerPage != i)
            Nav.NavigateTo($"/users?{new ListQuery { Search = Search, Page = i }}");
        pagerPage = i;
    }

    void OnSearch(string value)
    {
        search = value;
        Nav.NavigateTo(string.IsNullOrEmpty(search) ? $"/users" : $"/users?s={search}");
    }

    async void OnAddClick()
    {
        var dialog = await Dialog.ShowAsync<CreateModal>();
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnEditClick(UserModel item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), item);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }

    async void OnDeleteClick(UserModel item)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), item);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && grid != null)
            await grid.ReloadServerData();
    }
}