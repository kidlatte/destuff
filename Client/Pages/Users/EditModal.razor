@inject NavigationManager navigationManager
@inject HttpClient http

<div class="modal @modalClass" tabindex="-1" role="dialog" style="display:@modalDisplay; overflow-y: auto;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Password</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm class="bg-white rounded-3 m-auto p-4" OnValidSubmit="OnSubmit" Model="model">
                <div class="modal-body">
                    <DataAnnotationsValidator />

                    <h1 class="h3 mb-3 fw-normal">Change password for user @UserName</h1>

                    <div class="form-floating mb-1">
                        <InputText @bind-Value="model.UserName" id="inputUserName" class="form-control"
                            readonly="readonly" />
                        <label for="floatingPassword">Username</label>
                    </div>

                    <div class="form-floating mb-1">
                        <InputText @bind-Value="model.Password" type="password" id="inputPassword" class="form-control"
                            placeholder="New Password" />
                        <label for="floatingPassword">New Password</label>
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>

                    <label class="text-danger">@error</label>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary">Confirm</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (showBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string? UserName { get; set; }

    PasswordChangeModel model { get; set; } = new PasswordChangeModel();
    string error { get; set; } = "";
    bool loading { get; set; } = false;

    async Task OnSubmit()
    {
        error = "";
        try
        {
            await http.PostAsJsonAsync(ApiRoutes.AuthChangePassword, model);
            Close();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private string modalDisplay = "none";
    private string modalClass = "";
    private bool showBackdrop = false;

    public void Open()
    {
        model.UserName = UserName;

        modalDisplay = "block;";
        modalClass = "show";
        showBackdrop = true;
    }

    public void Close()
    {
        modalDisplay = "none";
        modalClass = "";
        showBackdrop = false;
    }
}