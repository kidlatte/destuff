@inject IHttpService Http

@if (Model != null)
{
    <EditForm OnValidSubmit="OnSubmit" Model="Model" autocomplete="off">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Register User</MudText>
            </TitleContent>
            <DialogContent>
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="Model.UserName" For="@(() => Model.UserName)" Disabled="loading"
                              Label="Username" Variant="Variant.Outlined" autocomplete="off" />
                <MudTextField @bind-Value="Model.Password" For="@(() => Model.Password)" Disabled="loading"
                              Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" autocomplete="new-password" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="() => dialog?.Cancel()" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public RegisterRequest? Model { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override void OnInitialized() => Model ??= new RegisterRequest();

    async Task OnSubmit()
    {
        if (Model == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            var result = await Http.PostAsync<IdentityResultModel>(ApiRoutes.AuthRegister, Model);
            if (result?.Succeeded == true)
            {
                dialog?.Close(DialogResult.Ok(result));
            }
            else if (result?.Succeeded == false)
            {
                error = string.Join(",", result.Errors);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
    }
}