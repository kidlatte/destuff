@page "/suppliers/{Slug}/{Tab?}"
@attribute [Authorize]

@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>@(Model == null ? "" : $"{Model.ShortName} | ") Suppliers | Destuff</PageTitle>

@if (Model != null)
{
    <div class="d-md-flex">
        <div class="text-right text-nowrap order-1 ms-5">
            <MudButton Href="/suppliers" StartIcon="@Icons.Material.Rounded.ChevronLeft" Variant="Variant.Outlined">
                Suppliers
            </MudButton>
            @if (Tab == null) {
                <MudButton OnClick="OnUpdateClick" Variant="Variant.Outlined"
                           Color="Color.Primary">Edit</MudButton>
                <MudButton OnClick="OnDeleteClick" Variant="Variant.Outlined"
                           Color="Color.Error">Delete</MudButton>
            }
        </div>
        <div class="text-truncate me-auto order-0">
            <MudText Typo="Typo.h1" Class="text-truncate my-5 my-md-3">@Model.ShortName</MudText>
        </div>
    </div>

    <MudTabs ActivePanelIndex="activePanelIndex" ActivePanelIndexChanged="OnActivePanelIndexChanged"
            Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Details">
            <div class="mw-100">
                <dl>
                    <dt>Name</dt>
                    <dd>@Model.Name</dd>
                </dl>

                @if (!string.IsNullOrEmpty(Model.Url))
                {
                    <dl>
                        <dt>URL</dt>
                        <dd class="text-truncate">
                            <MudLink Href="@Model.Url" Target="_blank">
                                @Model.Url
                            </MudLink>
                        </dd>
                    </dl>
                }

                @if (!string.IsNullOrEmpty(Model.Phone))
                {
                    <dl>
                        <dt>Phone</dt>
                        <dd>
                            <MudLink Href="@($"tel:{Model.Phone}")">
                                @Model.Phone
                            </MudLink>
                        </dd>
                    </dl>
                }

                @if (!string.IsNullOrEmpty(Model.Address))
                {
                    <dl>
                        <dt>Address</dt>
                        <dd>@Model.Address</dd>
                    </dl>
                }

                <div>@Model.Notes</div>
            </div>
        </MudTabPanel>
        <MudTabPanel Text="Stuffs">
            <Stuffs Model="Model" Page="Page" />
        </MudTabPanel>
        <MudTabPanel Text="Purchases">
            <Purchases Model="Model" Page="Page" />
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter] public string? Slug { get; set; }
    [Parameter] public string? Tab { get; set; }
    int activePanelIndex;

    [Parameter, SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    SupplierModel? Model { get; set; }

    protected override void OnParametersSet() => activePanelIndex = Tab switch {
        "stuffs" => 1,
        "purchases" => 2,
        _ => 0
    };

    protected override Task OnInitializedAsync() => LoadData();

    async Task LoadData()
    {
        try
        {
            Model = await Http.GetAsync<SupplierModel>($"{ApiRoutes.SupplierSlug}/{Slug}");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                Nav.NavigateTo($"/suppliers");
            else
                throw;
        }
    }

    void OnActivePanelIndexChanged(int index)
    {
        activePanelIndex = index;
        switch (index) {
            case 1:
                Nav.NavigateTo($"suppliers/{Slug}/stuffs");
                break;
            case 2:
                Nav.NavigateTo($"suppliers/{Slug}/purchases");
                break;
            default:
                Nav.NavigateTo($"suppliers/{Slug}");
                break;
        }
    }

    async void OnUpdateClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), Model);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data as SupplierModel;
            if (data == null || data.Slug == Slug) 
            {
                await LoadData();
                StateHasChanged();
            }
            else
                Nav.NavigateTo($"suppliers/{data.Slug}");
        }
    }

    async void OnDeleteClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), Model);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            Nav.NavigateTo($"/suppliers");
    }
}