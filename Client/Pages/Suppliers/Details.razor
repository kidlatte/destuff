@page "/suppliers/{Slug}"
@attribute [Authorize]

@inject NavigationManager Nav
@inject IHttpService Http
@inject IDialogService Dialog

<PageTitle>@(Model == null ? "Suppliers" : $"{Model.ShortName} | Suppliers") | Destuff</PageTitle>

@if (Model != null)
{
    <div class="d-md-flex">
        <div class="text-nowrap order-1">
            <MudButton Href="/suppliers" StartIcon="@Icons.Material.Rounded.ChevronLeft" Variant="Variant.Outlined">
                Suppliers
            </MudButton>
            <MudButton OnClick="OnUpdateClick" Variant="Variant.Outlined"
                Color="Color.Primary">Edit</MudButton>
            <MudButton OnClick="OnDeleteClick" Variant="Variant.Outlined"
                Color="Color.Error">Delete</MudButton>
        </div>
        <div class="text-truncate me-auto order-0">
            <MudText Typo="Typo.h1" Class="text-truncate my-5">@Model.ShortName</MudText>
        </div>
    </div>

    <div class="mw-100" style="width: 600px; max-width: 100%;">
        <dl>
            <dt>Name</dt>
            <dd>@Model.Name</dd>
        </dl>

        @if (!string.IsNullOrEmpty(Model.Url))
        {
            <dl>
                <dt>URL</dt>
                <dd class="text-truncate">
                    <a href="@Model.Url" target="_blank">
                        @Model.Url
                    </a>
                </dd>
            </dl>
        }

        @if (!string.IsNullOrEmpty(Model.Phone))
        {
            <dl>
                <dt>Phone</dt>
                <dd>@Model.Phone</dd>
            </dl>
        }

        @if (!string.IsNullOrEmpty(Model.Address))
        {
            <dl>
                <dt>Address</dt>
                <dd>@Model.Address</dd>
            </dl>
        }

        <div>@Model.Notes</div>
    </div>
}

@code {
    [Parameter]
    public string? Slug { get; set; }

    SupplierModel? Model { get; set; }


    protected override Task OnParametersSetAsync() => LoadData();

    async Task LoadData()
    {
        try
        {
            Model = await Http.GetAsync<SupplierModel>($"{ApiRoutes.SupplierSlug}/{Slug}");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == HttpStatusCode.NotFound)
                Nav.NavigateTo($"/suppliers");
            else
                throw;
        }
    }

    async void OnUpdateClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(UpdateModal.Model), Model);

        var dialog = await Dialog.ShowAsync<UpdateModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var data = result.Data as SupplierModel;
            if (data == null || data.Slug == Slug) 
            {
                await LoadData();
                StateHasChanged();
            }
            else
                Nav.NavigateTo($"suppliers/{data.Slug}");
        }
    }

    async void OnDeleteClick()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(DeleteModal.Model), Model);

        var dialog = await Dialog.ShowAsync<DeleteModal>("", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            Nav.NavigateTo($"/suppliers");
    }
}