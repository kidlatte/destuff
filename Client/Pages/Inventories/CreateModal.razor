@inject IHttpService Http

@if (request != null) {
    <EditForm OnValidSubmit="OnSubmit" Model="request">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6" Class="text-truncate pe-5">Inventory <strong>@Model.Name</strong></MudText>
            </TitleContent>
            <DialogContent>

                <MudSelect @bind-Value="request.Type" For="@(() => request.Type)" Label="Event"
                           Variant="Variant.Outlined">
                    @foreach (var item in eventTypes) {
                        <MudSelectItem Value="@item">@item</MudSelectItem>
                    }
                </MudSelect>

                <div class="my-5">
                    @if (request.Type == EventType.Inventory) {
                    if (!Model.StuffLocations.Any()) {
                        <MudText Typo="Typo.body1" Color="Color.Warning">
                            You have no location for <em>@Model.Name</em>. Please set a location for this stuff.
                        </MudText>
                    }
                    else if (Model.IsSingleLocation && Model.FirstLocation != null) {
                        <MudText Typo="Typo.body1">
                            <em>@Model.Name</em> is in <strong>@Model.FirstLocation.Name</strong>
                        </MudText>
                    }
                    else if (Model.StuffLocations.Count == 1) {
                        <MudText Typo="Typo.body1">
                            <em>@Model.Count</em> units of <em>@Model.Name</em> are in <strong>@Model.FirstLocation?.Name</strong>
                        </MudText>
                    }
                    else {
                        <MudText Typo="Typo.body1">
                            <em>@Model.Count</em> total units of <em>@Model.Name</em> are in <strong>@Model.StuffLocations.Count</strong> locations.
                        </MudText>
                    }
                } else {
                    <MudText Typo="Typo.body1">
                            <em>@Model.Name</em> has been <strong>@request.Type</strong>.
                    </MudText>
                }
                </div>

                <DataAnnotationsValidator />

                @if (request.Type != EventType.Inventory)
                {
                    <div class="d-sm-flex">
                        <div class="flex-auto">
                            <MudDatePicker @bind-Date="request.DateTime" For="@(() => request.DateTime)" Disabled="loading"
                                Label="Date" Variant="Variant.Outlined" />
                        </div>
                        @if (request.Type == EventType.Lent || request.Type == EventType.Donated)
                        {
                            <div class="ps-0 ps-sm-3" style="flex: 1 1 80%">
                                <MudTextField @bind-Value="request.Recipient" For="@(() => request.Recipient)" Disabled="loading"
                                    Label="@(request.Type == EventType.Lent ? "Borrower" : "Recipient")" Variant="Variant.Outlined" />
                            </div>
                        }
                    </div>
                }

                <MudTextField @bind-Value="request.Notes" For="@(() => request.Notes)" Disabled="loading"
                    Label="Notes" Variant="Variant.Outlined" Lines="3" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="() => dialog?.Cancel()" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSubmitEventClick { get; set; }

    [Parameter]
    public required StuffModel Model { get; set; }
    public EventRequest? request { get; set; }

    List<EventType> eventTypes = new() { EventType.Inventory, EventType.Lent, EventType.Donated, EventType.Consumed, EventType.Disposed };

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override void OnInitialized() => 
        request = new EventRequest { Type = EventType.Inventory, DateTime = DateTime.Now, StuffId = Model.Id, Count = Model.Count };

    async Task OnSubmit()
    {
        if (request == null)
            throw new NullReferenceException();

        loading = true;

        try {
            var result = await Http.SendAsync(HttpMethod.Post, ApiRoutes.Events, request);
            dialog?.Close();
        }
        catch (Exception ex) {
            error = ex.Message;
        }

        loading = false;
    }
}