@inject IHttpService Http

@if (request != null) {
    <EditForm OnValidSubmit="OnSubmit" Model="request">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6" Class="text-truncate pe-5">Inventory <strong>@Model.Name</strong></MudText>
            </TitleContent>
            <DialogContent>

                @* <MudSelect T="string" Label="Coffee" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Cappuccino")" />
                    <MudSelectItem Value="@("Cafe Latte")" />
                    <MudSelectItem Value="@("Espresso")" />
                </MudSelect> *@
                <div class="mb-5">
                    @if (!Model.StuffLocations.Any()) {
                        <MudText Typo="Typo.body1" Color="Color.Warning">
                            You have no location for <strong>@Model.Name</strong>. Please set a location for this stuff.
                        </MudText>
                    }
                    else if (Model.IsSingleLocation && Model.FirstLocation != null) {
                        <MudText Typo="Typo.body1">
                            <strong>@Model.Name</strong> is in <em>@Model.FirstLocation.Name</em>
                        </MudText>
                    }
                    else if (Model.StuffLocations.Count == 1) {
                        <MudText Typo="Typo.body1">
                            <strong>@Model.Count</strong> units of <em>@Model.Name</em> are in <em>@Model.FirstLocation?.Name</em>
                        </MudText>
                    }
                    else {
                        <MudText Typo="Typo.body1">
                            <strong>@Model.Count</strong> total units of <em>@Model.Name</em> are in <strong>@Model.StuffLocations.Count</strong> locations.
                        </MudText>
                    }
                </div>

                <DataAnnotationsValidator />

                <MudTextField @bind-Value="request.Notes" For="@(() => request.Notes)" Disabled="loading"
                            Label="Notes" Variant="Variant.Outlined" Lines="3" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" Disabled="!Model.StuffLocations.Any()" />
                <MudButton OnClick="() => dialog?.Cancel()" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSubmitEventClick { get; set; }

    [Parameter]
    public required StuffModel Model { get; set; }
    public InventoryRequest? request { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override void OnInitialized() => 
        request = new InventoryRequest { StuffId = Model.Id, Count = Model.Count };

    async Task OnSubmit()
    {
        if (request == null)
            throw new NullReferenceException();

        loading = true;

        if (!Model.StuffLocations.Any()) {
            request.Summary = $"No location on record";
        }
        else if (Model.IsSingleLocation && Model.FirstLocation != null) {
            request.Summary = $"Located in {Model.FirstLocation.Name}";
        }
        else if (Model.StuffLocations.Count == 1) {
            request.Summary = $"{Model.Count} units of {Model.Name} are in {Model.FirstLocation?.Name}";
        }
        else {
            request.Summary = $"{Model.Count} total units of {Model.Name} are in {Model.StuffLocations.Count} locations.";
        }

        try {
            var result = await Http.SendAsync(HttpMethod.Post, ApiRoutes.Inventories, request);
            dialog?.Close();
        }
        catch (Exception ex) {
            error = ex.Message;
        }

        loading = false;
    }
}