@inject IHttpService Http

@if (Model != null) {
    <EditForm OnValidSubmit="OnSubmit" Model="Model">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6" Class="text-truncate pe-5">Inventory <strong>@Model.Name</strong></MudText>
            </TitleContent>
            <DialogContent>
                <DataAnnotationsValidator />

                @if (!Model.StuffLocations.Any())
                {
                    <MudText Typo="Typo.body1" Color="Color.Warning">
                        You have no location for <strong>@Model.Name</strong>. Please set a location for this stuff.
                    </MudText>
                }
                else if (Model.IsSingleLocation && Model.FirstLocation != null)
                {
                    <p>
                        <strong>@Model.Name</strong> is in <strong>@Model.FirstLocation.Name</strong>
                    </p>
                }
                else if (Model.StuffLocations.Count == 1) 
                {
                    <p>
                        <em>@Model.Count</em> × <strong>@Model.Name</strong> are in <strong>@Model.FirstLocation?.Name</strong>
                    </p>
                }
                else {
                    <p>
                        <em>@Model.Count</em> × <strong>@Model.Name</strong> are in <em>@Model.StuffLocations.Count</em> locations.
                    </p>
                }

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" Disabled="!Model.StuffLocations.Any()" />
                <MudButton OnClick="() => dialog?.Cancel()" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public required StuffModel Model { get; set; }
    public InventoryRequest? request { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override void OnInitialized() => 
        request = new InventoryRequest { StuffId = Model.Id, Count = Model.Count };

    async Task OnSubmit()
    {
        if (request == null)
            throw new NullReferenceException();

        loading = true;

        try {
            var result = await Http.SendAsync(HttpMethod.Post, ApiRoutes.Inventories, request);
            dialog?.Close();
        }
        catch (Exception ex) {
            error = ex.Message;
        }

        loading = false;
    }
}