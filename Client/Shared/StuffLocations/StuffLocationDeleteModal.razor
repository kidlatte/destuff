@inject IHttpService http

<EditForm OnValidSubmit="OnSubmit" Model="Model" autocomplete="off">
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6" Class="text-truncate pe-5">Remove from <strong>@Model.Location.Name</strong></MudText>
        </TitleContent>
        <DialogContent>
            <MudText Typo="Typo.body1" Class="mb-5">
                Are you sure you want to remove stuff <em>@Model.Stuff.Name</em>
                from location <strong>@Model.Location.Name</strong>
            </MudText>

            <DataAnnotationsValidator />
            <MudText Color="@Color.Error">@error</MudText>
        </DialogContent>
        <DialogActions>
            <LoadingButton Loading="loading" Label="DELETE" Color="Color.Warning" />
            <MudButton OnClick="() => dialog?.Cancel()" Disabled="loading" Color="Color.Default">
                Cancel
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public required StuffLocationModel Model { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    async Task OnSubmit()
    {
        loading = true;

        try
        {
            await http.DeleteAsync($"{ApiRoutes.StuffLocations}/{Model.Stuff.Id}/{Model.Location.Id}");
            dialog?.Close(DialogResult.Ok(Model));
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
    }
}
