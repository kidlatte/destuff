@inject IHttpService Http

@if (Model != null)
{
    <EditForm OnValidSubmit="OnSubmit" Model="Model" autocomplete="off">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">
                    Add Location
                    @if (Parent != null)
                    {
                        <text>
                            in <strong>@Parent.Name</strong>
                        </text>
                    }
                </MudText>
            </TitleContent>
            <DialogContent>
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="Model.Name" For="@(() => Model.Name)" Disabled="loading"
                              Label="Name" Variant="Variant.Outlined" />

                @if (Parent == null)
                {
                    <LocationSelect @bind-Value="Model.ParentId" Label="Parent" Loading="loading" />
                }

                <MudTextField @bind-Value="Model.Notes" For="@(() => Model.Notes)" Disabled="loading"
                              Label="Notes" Variant="Variant.Outlined" Lines="3" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="() => dialog?.Cancel()" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter]
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public LocationModel? Parent { get; set; }

    [Parameter]
    public LocationRequest? Model { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override void OnInitialized() => Model ??= new LocationRequest { ParentId = Parent?.Id  };

    async Task OnSubmit()
    {
        if (Model == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            var result = await Http.PostAsync<LocationModel>(ApiRoutes.Locations, Model);
            dialog?.Close(DialogResult.Ok(result));
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
    }

    public void Open(LocationModel? parent = null)
    {
        Model = new LocationRequest 
        {
            ParentId = parent?.Id
        };

        StateHasChanged();
    }
}