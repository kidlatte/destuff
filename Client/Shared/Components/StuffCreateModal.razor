@inject IHttpService http

@if (model != null)
{
    <EditForm OnValidSubmit="OnSubmit" Model="model" autocomplete="off">
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Add Stuff</MudText>
            </TitleContent>   
            <DialogContent>
                <DataAnnotationsValidator />

                <MudTextField @bind-Value="model.Name" For="@(() => model.Name)" Disabled="loading"
                          Label="Name" Variant="Variant.Outlined" />

                <MudTextField @bind-Value="model.Url" For="@(() => model.Url)" Disabled="loading"
                          Label="Product details webpage" Variant="Variant.Outlined" />
                <div class="form-floating mb-1">
                    <LocationSelect @bind-Value="model.LocationId" Loading="loading" />
                </div>
                <MudTextField @bind-Value="model.Notes" For="@(() => model.Notes)" Disabled="loading"
                          Label="Notes" Variant="Variant.Outlined" Lines="3" />

                <MudText Color="@Color.Error">@error</MudText>
            </DialogContent>
            <DialogActions>
                <LoadingButton Loading="loading" />
                <MudButton OnClick="Close" Disabled="loading" Color="Color.Default">
                    Cancel
                </MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [CascadingParameter] 
    MudDialogInstance? dialog { get; set; }

    [Parameter]
    public EventCallback<StuffModel> OnCreated { get; set; }

    StuffRequest? model { get; set; }

    string error { get; set; } = "";
    bool loading { get; set; } = false;

    protected override async Task OnInitializedAsync() 
    {
        await base.OnInitializedAsync();
        model = new StuffRequest();
    }

    async Task OnSubmit()
    {
        if (model == null)
            throw new NullReferenceException();

        loading = true;

        try
        {
            var result = await http.PostAsync<StuffModel>(ApiRoutes.Stuffs, model);
            dialog?.Close(DialogResult.Ok(result));
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        loading = false;
    }

    public void Open(string? name = null)
    {
        model = new StuffRequest { Name = name };
        StateHasChanged();
    }

    public void Close()
    {
        model = null;
        dialog?.Cancel();
    }
}