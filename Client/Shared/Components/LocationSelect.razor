@inject IHttpService http

<input @bind-value="locationName" bind-value:event="oninput" @onfocus ="() => OnLocationFocus()"  @onblur ="() => OnLocationBlur()"
    class="form-control" placeholder="Location" disable="@Loading" autocomplete="off" />
<label>Location</label>
@if (showLocations)
{
    <div class="autocomplete list-group">
        <button @onclick="() => OnLocationClick(null)" type="button" class="list-group-item list-group-item-action">
            <em class="text-muted">none</em>
        </button>
        @foreach(var item in locations.OrEmpty())
        {
            <button @onclick="() => OnLocationClick(item)" type="button" class="list-group-item list-group-item-action">
                @item.Name
            </button>
        }
    </div>
}

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }

    List<LocationListItem>? locations { get; set; }
    string? locationName { get; set; }
    bool showLocations { get; set; } = false;

    protected override async Task OnInitializedAsync() 
    {
        locations = await http.GetAsync<List<LocationListItem>>(ApiRoutes.LocationLookup);
        locationName = locations?.FirstOrDefault(x => x.Id == Value)?.Name;
    }        

    void OnLocationFocus()
    {
        showLocations = true;
    }

    async Task OnLocationBlur()
    {
        await Task.Delay(500);
        showLocations = false;
    }

    async Task OnLocationClick(ILocationModel? location)
    {
        Value = location?.Id;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(location?.Id);
        locationName = location?.Name;
        showLocations = false;
    }
}