@inject IHttpService http

<MudAutocomplete T="ILocationDataModel" Value="model" ValueChanged="OnClick" 
    SearchFunc="@Search" ToStringFunc="e => e?.Name"
    Label="Location" DebounceInterval="300" Variant="Variant.Outlined"
    ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false"
>
    <ItemTemplate Context="item">
        @if (item.Id == "add")
        {
            <em class="text-muted">Add Location</em>
            <strong>@item.Name</strong>
        }
        else
        {
            @if (item.Data != null)
            {
                @foreach (var path in item.Data.Path.OrEmpty())
                {
                    <em>@path.Name</em>
                    <i class="bi bi-chevron-compact-right"></i>
                }
            }
            <span>@item.Name</span>
        }
    </ItemTemplate>
</MudAutocomplete>

<LocationCreateModal @ref="create" OnCreated="OnCreated" />

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }

    ICollection<ILocationDataModel>? list { get; set; }
    ILocationDataModel? model { get; set; }

    LocationCreateModal? create;

    private async Task<IEnumerable<ILocationDataModel>?> Search(string value)
    {
        var text = value;
        var query = new PagedQuery { Search = value, PageSize = 10, SortField = nameof(LocationModel.Id) };
        var result = await http.GetAsync<PagedList<LocationLookupItem>>($"{ApiRoutes.LocationLookup}?{query}");
        return result?.List
            .Append(new LocationLookupItem { Id = "add", Name = value, Slug = "", })
            .Cast<ILocationDataModel>().ToList();
    }

    async Task OnClick(ILocationDataModel? item)
    {
        if (item?.Id == "add")
            create?.Open(item.Name);
        else
        {
            Value = item?.Id;
            if (ValueChanged.HasDelegate)
                await ValueChanged.InvokeAsync(item?.Id);

            model = item;
        }
    }

    async Task OnCreated(LocationModel item)
    {
        await OnClick(item);
    }

    static string? GetPath(ILocationDataModel? item) => item == null ? null : 
        string.Join("", item.Data?.Path?.Select(x => $"{x.Name} > ") ?? new List<string>()) + item.Name;
}