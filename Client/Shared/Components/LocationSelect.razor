@inject IHttpService http

<input value="@text" @oninput="OnInput" @onfocus="OnFocus" @onblur="OnBlur"
       class="form-control" placeholder="Location" disable="@Loading" autocomplete="off" />
<label>Location</label>
@if (showOptions)
{
    <div class="autocomplete list-group">
        <button @onclick="() => OnClick(null)" type="button" class="list-group-item list-group-item-action">
            <em class="text-muted">none</em>
        </button>
        @foreach (var item in list.OrEmpty())
        {
            <button @onclick="() => OnClick(item)" type="button"
        class="list-group-item list-group-item-action @(item.Id == model?.Id ? "list-group-item-secondary" : "")">

                @if (item.Data != null)
                {
                    @foreach (var path in item.Data.Path.OrEmpty())
                    {
                        <em>@path.Name</em>
                        <i class="bi bi-chevron-compact-right"></i>
                    }
                    <span>@item.Name</span>
                }
            </button>
        }
        @if (text != GetPath(model))
        {
            <button @onclick="OnCreate" type="button" class="list-group-item list-group-item-action">
                <em class="text-muted">Add Location @(string.IsNullOrEmpty(text) ? "" : $"\"{text}\"")</em>
            </button>
        }
    </div>
}

<LocationCreateModal @ref="create" OnCreated="OnCreated" />

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }

    ICollection<ILocationDataModel>? list { get; set; }
    ILocationDataModel? model { get; set; }
    string? text { get; set; }
    bool showOptions { get; set; } = false;

    Timer? timer;
    LocationCreateModal? create;

    protected override async Task OnInitializedAsync() 
    {
        Console.WriteLine($"Location: {Value}");

        await LoadData();

        if (Value != null && list != null)
        {
            model = list.Where(x => x.Id == Value).FirstOrDefault() ?? 
                await http.GetAsync<LocationModel>($"{ApiRoutes.Locations}/{Value}");
            text = GetPath(model);
        }

        timer = new Timer(async _ => await LoadData(), null, Timeout.Infinite, Timeout.Infinite);
    }        

    void OnInput(ChangeEventArgs e)
    {
        text = e.Value?.ToString();
        timer?.Change(500, Timeout.Infinite);
    }

    void OnFocus()
    {
        showOptions = true;
    }

    async Task OnBlur()
    {
        await Task.Delay(300); // wait for onclick
        text = GetPath(model);
        showOptions = false;
    }

    async Task OnClick(ILocationDataModel? item)
    {
        Value = item?.Id;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(item?.Id);

        model = item;
        text = GetPath(item);
        showOptions = false;
    }

    void OnCreate()
    {
        showOptions = false;
        create?.Open(text);
    }

    async Task OnCreated(LocationModel item)
    {
        await OnClick(item);
        await LoadData();
    }

    async Task LoadData()
    {
        var query = new PagedQuery { Search = text, SortField = nameof(LocationModel.Id) };
        var result = await http.GetAsync<PagedList<LocationLookupItem>>($"{ApiRoutes.LocationLookup}?{query}");
        list = result?.List.Cast<ILocationDataModel>().ToList();
        await InvokeAsync(StateHasChanged);
    }

    static string? GetPath(ILocationDataModel? item) => item == null ? null : 
        string.Join("", item.Data?.Path?.Select(x => $"{x.Name} > ") ?? new List<string>()) + item.Name;
}