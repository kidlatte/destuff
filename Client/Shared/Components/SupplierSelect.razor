@inject IHttpService Http
@inject IDialogService Dialog

<MudAutocomplete @ref="field" @bind-Text="text" T="ISupplierModel"
                 Value="Model" ValueChanged="ModelChanged"
                 SearchFunc="@Search" ToStringFunc="@(x => x.Name)" Disabled="Disabled"
                 Label="Supplier" Variant="Variant.Outlined" 
                 Clearable="true" ResetValueOnEmptyText="true" ShowProgressIndicator="true">
</MudAutocomplete>

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Disabled { get; set; }

    IEnumerable<ISupplierModel> list = Enumerable.Empty<ISupplierModel>();

    MudAutocomplete<ISupplierModel>? field;
    string? text { get; set; }

    ISupplierModel? Model { get; set; }

    protected override void OnParametersSet() => SetModel();

    void SetModel() => Model = list.FirstOrDefault(x => x.Id == Value);

    async Task<IEnumerable<ISupplierModel>> Search(string value)
    {
        var query = new PagedQuery { Search = value, PageSize = 9 };
        var result = await Http.GetAsync<PagedList<SupplierListItem>>($"{ApiRoutes.Suppliers}?{query}");

        list = result?.List.ToList() ?? Enumerable.Empty<SupplierListItem>();
        SetModel();

        return list.Append(new SupplierListItem { Id = "add", Slug = "add", Name = "-- Create new Supplier --" });
    }

    private async Task ModelChanged(ISupplierModel? value)
    {
        if (value?.Id == "add" && field != null)
        {
            await field.ToggleMenu(); // close dropdown
            var model = await CreateNewSupplier();

            await field.Clear();
            await field.ToggleMenu(); // force search

            await ValueChanged.InvokeAsync(model?.Id);
            text = model?.Name;
        }
        else
        {
            Model = value;
            if (ValueChanged.HasDelegate)
                await ValueChanged.InvokeAsync(value?.Id);
        }
    }

    async Task<ISupplierModel?> CreateNewSupplier()
    {
        var dialog = await Dialog.ShowAsync<SupplierCreateModal>();
        var result = await dialog.Result;

        if (result.Canceled)
            return null;
        
        return result.Data as ISupplierModel;
    }
}