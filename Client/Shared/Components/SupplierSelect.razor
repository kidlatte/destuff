@inject IHttpService http

<input @bind-value="supplierName" @bind-value:event="oninput" @onfocus ="() => OnSupplierFocus()"  @onblur ="() => OnSupplierBlur()"
    class="form-control" placeholder="Supplier" disable="@Loading" autocomplete="off" />
<label>Supplier</label>
@if (showSuppliers)
{
    <div class="autocomplete list-group">
        <button @onclick="() => OnSupplierClick(null)" type="button" class="list-group-item list-group-item-action">
            <em class="text-muted">none</em>
        </button>
        @foreach(var item in suppliers.OrEmpty())
        {
            <button @onclick="() => OnSupplierClick(item)" type="button" class="list-group-item list-group-item-action">
                @item.Name
            </button>
        }
        @if (supplierName != supplier?.Name)
        {
            <button @onclick="OnSupplierCreate" type="button" class="list-group-item list-group-item-action">
                <em class="text-muted">Add Supplier @(string.IsNullOrEmpty(supplierName) ? "" : $"\"{supplierName}\"")</em>
            </button>
        }
    </div>
}

<SupplierCreateModal @ref="create" OnCreated="OnSupplierCreated" />

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }

    List<SupplierListItem>? suppliers { get; set; }
    ISupplierModel? supplier { get; set; }
    string? supplierName { get; set; }
    bool showSuppliers { get; set; } = false;

    SupplierCreateModal? create;

    protected override async Task OnInitializedAsync() 
    {
        suppliers = await http.GetAsync<List<SupplierListItem>>(ApiRoutes.SupplierLookup);
        supplier = suppliers?.FirstOrDefault(x => x.Id == Value);
        supplierName = supplier?.Name;
    }

    void OnSupplierFocus()
    {
        showSuppliers = true;
    }

    async Task OnSupplierBlur()
    {
        await Task.Delay(100);
        showSuppliers = false;
        supplierName = supplier?.Name;
    }

    async Task OnSupplierClick(ISupplierModel? model)
    {
        Value = model?.Id;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(model?.Id);

        supplier = model;
        supplierName = supplier?.Name;
        showSuppliers = false;
    }

    void OnSupplierCreate()
    {
        showSuppliers = false;
        create?.Open(supplierName);
    }

    async Task OnSupplierCreated(SupplierModel model)
    {
        await OnSupplierClick(model);
        suppliers = await http.GetAsync<List<SupplierListItem>>(ApiRoutes.SupplierLookup);
    }
}