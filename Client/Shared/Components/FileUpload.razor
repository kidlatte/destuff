@using System.Net.Http.Headers

@inject IHttpService http

<MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="OnFilesChanged" 
        Class="@($"d-inline-flex mt-0 {Class}")" Accept="@accept">
    <ButtonTemplate>
        <MudButton HtmlTag="label" Variant="Variant" Color="Color" Style="{ min-width: 40px }" for="@context">
            @if (loading)
            {
                <MudProgressCircular Color="Color.Default" Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                @Label
            }
        </MudButton>
        
    </ButtonTemplate>
</MudFileUpload>

@code
{
    [Parameter]
    public EventCallback<UploadModel> OnUploaded { get; set; }

    [Parameter] public string? LocationId { get; set; }
    [Parameter] public string? StuffId { get; set; }
    [Parameter] public string? EventId { get; set; }

    [Parameter] public string Label { get; set; } = "Upload files";
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public bool ImageOnly { get; set; }
    [Parameter] public Color Color { get; set; }
    [Parameter] public Variant Variant { get; set; }

    string accept => ImageOnly ? "image/*" : "*";

    private bool loading;

    private async void OnFilesChanged(IReadOnlyList<IBrowserFile> files)
    {
        loading = true;

        foreach (var file in files)
        {
            var fileContent = new StreamContent(file.OpenReadStream(Settings.MaxUploadSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            using var content = new MultipartFormDataContent();
            content.Add(fileContent, "file", file.Name);

            if (LocationId != null)
                content.Add(new StringContent(LocationId), nameof(LocationId));

            if (StuffId != null)
                content.Add(new StringContent(StuffId), nameof(StuffId));

            if (EventId != null)
                content.Add(new StringContent(EventId), nameof(EventId));

            var route = ImageOnly ? ApiRoutes.UploadImage : ApiRoutes.Uploads;
            var request = new HttpRequestMessage(HttpMethod.Post, route);
            request.Content = content;

            var response = await http.SendAsync(request);
            var model = await response.Content.ReadFromJsonAsync<UploadModel>();

            await OnUploaded.InvokeAsync(model);
        }

        loading = false;
        StateHasChanged();
    }
}
