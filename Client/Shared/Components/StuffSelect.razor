@inject IHttpService http

<input @bind-value="stuffName" bind-value:event="oninput" @onfocus ="() => OnStuffFocus()"  @onblur ="() => OnStuffBlur()"
    class="form-control" placeholder="Stuff" disable="@Loading" autocomplete="off" />
<label>Stuff</label>
@if (showStuffs)
{
    <div class="autocomplete list-group">
        <button @onclick="() => OnStuffClick(null)" type="button" class="list-group-item list-group-item-action">
            <em class="text-muted">none</em>
        </button>
        @foreach(var item in stuffs.OrEmpty())
        {
            <button @onclick="() => OnStuffClick(item)" type="button" class="list-group-item list-group-item-action">
                @item.Name
            </button>
        }
    </div>
}

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }

    List<StuffListItem>? stuffs { get; set; }
    string? stuffName { get; set; }
    bool showStuffs { get; set; } = false;

    protected override async Task OnInitializedAsync() 
    {
        stuffs = await http.GetAsync<List<StuffListItem>>(ApiRoutes.StuffLookup);
        stuffName = stuffs?.FirstOrDefault(x => x.Id == Value)?.Name;
    }        

    void OnStuffFocus()
    {
        showStuffs = true;
    }

    async Task OnStuffBlur()
    {
        await Task.Delay(500);
        showStuffs = false;
    }

    async Task OnStuffClick(IStuffModel? stuff)
    {
        Value = stuff?.Id;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(stuff?.Id);
        stuffName = stuff?.Name;
        showStuffs = false;
    }
}