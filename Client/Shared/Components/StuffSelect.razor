@inject IHttpService http

<input value="@text" @oninput="OnInput" @onfocus="OnFocus" @onblur="OnBlur"
    class="form-control" placeholder="Stuff" disable="@Loading" autocomplete="off" />
<label>Stuff</label>
@if (showOptions)
{
    <div class="autocomplete list-group">
        <button @onclick="() => OnClick(null)" type="button" class="list-group-item list-group-item-action">
            <em class="text-muted">none</em>
        </button>
        @foreach(var item in list.OrEmpty())
        {
            <button @onclick="() => OnClick(item)" type="button"
                    class="list-group-item list-group-item-action @(item.Id == model?.Id ? "list-group-item-secondary" : "")">
                @item.Name
            </button>
        }
        @if (text != model?.Name)
        {
            <button @onclick="OnCreate" type="button" class="list-group-item list-group-item-action">
                <em class="text-muted">Add Stuff @(string.IsNullOrEmpty(text) ? "" : $"\"{text}\"")</em>
            </button>
        }
    </div>
}

<StuffCreateModal @ref="create" OnCreated="OnCreated" />

@code
{
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public bool Loading { get; set; }

    ICollection<IStuffModel>? list { get; set; }
    IStuffModel? model { get; set; }
    string? text { get; set; }
    bool showOptions { get; set; } = false;

    Timer? timer;
    StuffCreateModal? create;

    protected override async Task OnInitializedAsync() 
    {
        await LoadData();

        if (Value != null && list != null)
        {
            model = list.Where(x => x.Id == Value).FirstOrDefault() ??
                await http.GetAsync<StuffModel>($"{ApiRoutes.Stuffs}/{Value}");
            text = model?.Name;
        }

        timer = new Timer(async _ => await LoadData(), null, Timeout.Infinite, Timeout.Infinite);
    }

    void OnInput(ChangeEventArgs e)
    {
        text = e.Value?.ToString();
        timer?.Change(500, Timeout.Infinite);
    }

    void OnFocus()
    {
        showOptions = true;
    }

    async Task OnBlur()
    {
        await Task.Delay(300); // wait for onclick
        text = model?.Name;
        showOptions = false;
    }

    async Task OnClick(IStuffModel? item)
    {
        Value = item?.Id;
        if (ValueChanged.HasDelegate)
            await ValueChanged.InvokeAsync(item?.Id);

        model = item;
        text = item?.Name;
        showOptions = false;
    }

    void OnCreate()
    {
        showOptions = false;
        create?.Open(text);
    }

    async Task OnCreated(StuffModel item)
    {
        await OnClick(item);
        await LoadData();
    }

    async Task LoadData()
    {
        var query = new PagedQuery { Search = text, PageSize = 10 };
        var result = await http.GetAsync<PagedList<StuffListItem>>($"{ApiRoutes.Stuffs}?{query}");
        list = result?.List.Cast<IStuffModel>().ToList();
        await InvokeAsync(StateHasChanged);
    }
}